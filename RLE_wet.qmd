---
title: "RLE_riv"
format: html
---

### Set up the Project and import the data

```{r}
# Add packages: 

library(sf)
library(tidyverse)
library(stringr)
library(terra)
library(PROJ)

# Add data
# Replace with your actual file path and layer name if needed
wetlands <- st_read("C:/Users/skownoa/Dropbox/NBAwork/Wetlands/NBA2025_wetl.gpkg")
wetlands <- wetlands %>% mutate(fid = row_number())
#ensure it uses proj =  wgs84 aea cm 25 -24 -33
# st_crs(wetlands)

```

### Clean up input data

```{r}
## Clean up this version : there are 215 NA in New_name (type) filter these out (future version will name them), make NAs in NBAPES25 into "DD", add zone column  by finding text after _ in the New_name. 

options(scipen = 999)

wet <- wetlands %>%
  select(fid,geom, New_name, NBAPES2025, EC18ALL) %>%
  # add area column 
  mutate(area_m2 = as.numeric(st_area(geom))) %>%
  # remove rows with NA in New_name
  filter(!is.na(New_name)) %>% 
  mutate(New_name = str_replace(New_name, "Unchannelled.*", "Unchannelled valley-bottom")
  ) %>%
  # replace underscores inside Drakensberg_Grassland with a space
  mutate(New_name = str_replace(New_name, "Drakensberg_Grassland", "Drakensberg Grassland")) %>%
    # rename some types to include hgm aspect
  mutate(New_name = 
         case_when(New_name == "Indian Ocean Coastal Belt Bioregion" ~ "Maputaland Coastal Belt_Depression",
                   New_name == "Eastern Fynbos-Renosterveld Bioregion" ~ "Eastern Fynbos-Renosterveld_Depression",
                   New_name == "Seashore Vegetation" ~ "Albany Thicket_Depression",                      
                   New_name == "Richtersveld Bioregion" ~ "Karoo Interior_Depression",
                   New_name == "South Strandveld Bioregion" ~ "Southern Fynbos_Depression",
                   New_name == "Mesic Highveld Grassland Group 3" ~ "Mesic Highveld Grassland_Depression",
                   New_name == "Mesic Highveld Grassland Group 4" ~ "Mesic Highveld Grassland_Depression",
                   New_name == "Southern Namib Desert Bioregion" ~ "Karoo Interior_Depression",
                   New_name == "Knersvlakte Bioregion" ~ "Knersvlakte_Depression",
                   New_name == "Gariep Desert Bioregion" ~ "Karoo Interior_Depression",
                   New_name == "Dry Highveld Grassland Group 3" ~ "Dry Highveld Grassland_Depression",
                   New_name == "East Coast Renosterveld Bioregion" ~ "East Coast Renosterveld_Depression",
                   New_name == "South Coast Fynbos Bioregion" ~ "Southern Fynbos_Depression",                                     New_name == "Southern Fynbos Bioregion" ~ "Southern Fynbos_Depression",
                   TRUE       ~ New_name) ) %>%
  # clean up names with "Bioregion" still included (from original naming error)
   mutate(New_name = str_replace(New_name, " Bioregion", "")) %>%
  # clean up Mopani region error
     mutate(New_name = str_replace(New_name, " region", "")) %>%
  # fix spelling of Maputoland better to use Maputaland as in the casewhen
  mutate(New_name = str_replace(New_name, "Maputo", "Maputa")) %>%
  # make a new " hgm" column by getting the text after the _ in New_name
  mutate(hgm = str_extract(New_name, "(?<=_).*")) %>% 
  # make a new "bioregion" col by getting the text before the _ in New_name
  mutate(bioregion = str_extract(New_name, "^[^_]+")) %>%
  # make PES data usable but this will change when Nancy supplies real PES data for depressions and 2018
  mutate(pes24 = ifelse(is.na(NBAPES2025)|NBAPES2025 == "not assessed", "DD", NBAPES2025)) %>%
  mutate(pes18 = ifelse(is.na(EC18ALL), pes24, EC18ALL)) %>% # fill NAs for PES2018 with 2022 values
  select(-NBAPES2025, -EC18ALL) %>%
  rename(type = New_name)

# remove geometry for quicker summaries
wet_tb <- st_drop_geometry(wet)
  
# make a simple table of TYPE and HGM to join with results later 
  type_hgm_tb <- wet %>% select(type, hgm) %>% distinct(type, .keep_all = TRUE) %>%  st_drop_geometry()

#   # check cols
#  sort(unique(wet$bioregion)) 
#  
# # write new spatial output for Nancy using terra as sf outputs a gpkg that cant be read by ARCGIS due to WKT # 
# # BUT NOTE YOU CANT DO THIS IN CUSTOM CRS SO USED UNPROJECTED WGS84 
# wet_v <- wetlands %>%
#       left_join(st_drop_geometry(wet_tb), by = "fid") %>%
#       relocate(pes24, .after = pes18) %>%
#       mutate(area_m2 = as.numeric(area_m2))
# 
# wet_v_dd <- st_transform(wet_v, 4326)
# st_write(wet_v_dd, "C:/Users/skownoa/Dropbox/NBAwork/Wetlands/wetlands_20250731.gpkg", delete_dsn = TRUE) 


```

Calculate EOO using convex hulls in sf

```{r}
# Initialize a list to store results
eoo_list <- list()

# Iterate through unique WET TYPE values 
for (wet_type in unique(wet$type)) {
  subset_data <- wet %>% filter(type == wet_type)
  if (nrow(subset_data) > 0) {
    convex_hull <- st_convex_hull(st_union(subset_data))
    hull_area <- st_area(convex_hull)
    eoo_list[[wet_type]] <- as.numeric(hull_area)
  }
}

eoo_df <- data.frame(
  type = names(eoo_list),
  AREA_EOO = unlist(eoo_list)
) %>%
  mutate(eoo_km2 = AREA_EOO/1000000) %>%
  select(!AREA_EOO)

write.csv(eoo_df, "outputs/EOO_all.csv")
eoo_df <- read.csv("C:/Rdata/RLE_wet/outputs/EOO_all.csv")

```

Criterion A2b A3 and B1ai (using rod) calculation

```{r}
# cross tab estuaries with land cover 1990, 2014, 2018 and 2022 and calculate extent lost and rate of loss

#Add data 
lc1990 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc1990_7class.tif") 
lc2014 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2014_7class.tif")
lc2018 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2018_7class.tif")
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")

# Extract raster values under each polygon, return ID
extract1990 <- extract(lc1990, wet)
extract1990$type <- wet$type[extract1990$ID] # note - indexing not a join
tb1990 <- extract1990 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 1990)

extract2018 <- extract(lc2018, wet)
extract2018$type <- wet$type[extract2018$ID] # note - indexing not a join
tb2018 <- extract2018 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 2018)

extract2022 <- extract(lc2022, wet)
extract2022$type <- wet$type[extract2022$ID] # note - indexing not a join
tb2022 <- extract2022 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 2022)

# combine the results
lc7_list = list(tb1990,tb2018,tb2022) 
lc7_rall <- lc7_list %>%  bind_rows() %>%   
  as_tibble()

# save to avoid rerunning extracts
write_csv(lc7_rall, file = "outputs/lc7_rall.csv")

lc7_rall <- read_csv("outputs/lc7_rall.csv") 

type_ras_ext <- lc7_rall %>%   
  filter(YEAR == 2022) %>%
  group_by(YEAR, type) %>% 
  summarise(tot_m2 = sum(Freq*400),.groups = "drop") %>%
  pivot_wider(names_from = "YEAR", values_from = "tot_m2") %>%
  rename(type_area = `2022`)

type_nat_ext <- lc7_rall %>%   
  filter(class == 1| is.na(class)) %>% 
  group_by(YEAR, type) %>% 
  summarise(nat_m2 = sum(Freq*400),.groups = "drop") %>%
  pivot_wider(names_from = "YEAR", values_from = "nat_m2", names_glue = "nat{YEAR}")

type_lc_metrics <- type_ras_ext %>%
  left_join(eoo_df, by = "type") %>%
  left_join(type_nat_ext, by = "type") %>%
   #metrics for A3
  mutate(prpnat1990 = nat1990/type_area, prpnat2018 = nat2018/type_area, prpnat2022 = nat2022/type_area) %>%
  #metrics for A2b
  mutate(ard9022 = (nat1990-nat2022)/(2022-1990)) %>%
  mutate(nat40_9022 = nat1990 - (ard9022*50))  %>%
  mutate(prplost9040_9022 = (nat1990-nat40_9022)/nat1990) %>%
  mutate(ard1822 = (nat2018-nat2022)/(2022-2018)) %>%
  mutate(nat40_1822 = nat2018 - (ard1822*50))  %>%
  mutate(prplost9040_1822 = (nat1990-nat40_1822)/nat1990) %>%
  mutate(ard9018 = (nat1990-nat2018)/(2018-1990)) %>%
  mutate(nat40_9018 = nat1990 - (ard9018*50))  %>%
  mutate(prplost9040_9018 = (nat1990-nat40_9018)/nat1990) %>%
  mutate(rod9022 = prplost9040_9022/50*100) %>%
  mutate(rod1822 = prplost9040_1822/50*100) %>%
  mutate(rod9018 = prplost9040_9018/50*100) %>%
      # assessments 2024
  mutate(A3_24 = case_when(prpnat2022 < 0.1 ~ "CR",
                        prpnat2022 < 0.3 ~ "EN", 
                        prpnat2022 < 0.5 ~ "VU", 
                        TRUE ~"LC")) %>%
  mutate(A2b_24 = case_when(prplost9040_1822 >= 0.8 ~ "CR",
                         prplost9040_1822 >= 0.5 ~ "EN",
                         prplost9040_1822 >= 0.3 ~ "VU", 
                         TRUE ~ "LC")) %>%
  mutate(B1ai_24 = case_when( rod1822 >= 0.3  & eoo_km2  <= 2000 ~ "CR",
                              rod1822 >= 0.3  & eoo_km2   <= 20000 ~ "EN",
                              rod1822 >= 0.3  & eoo_km2   <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
# assessments 2018
  mutate(A3_18 = case_when(prpnat2018 < 0.1 ~ "CR",
                        prpnat2018 < 0.3 ~ "EN", 
                        prpnat2018 < 0.5 ~ "VU", 
                        TRUE ~"LC")) %>%
  mutate(A2b_18 = case_when(prplost9040_9018 >= 0.8 ~ "CR",
                         prplost9040_9018 >= 0.5 ~ "EN",
                         prplost9040_9018 >= 0.3 ~ "VU", 
                         TRUE ~ "LC")) %>%
  mutate(B1ai_18 = case_when( rod9018 >= 0.3  & eoo_km2  <= 2000 ~ "CR",
                              rod9018 >= 0.3  & eoo_km2   <= 20000 ~ "EN",
                              rod9018 >= 0.3  & eoo_km2   <= 50000 ~ "VU",
                                 TRUE ~ "LC"))

# Export a csv of results - Condition and EPL per river type 2018 and 2024
   write_csv(type_lc_metrics, file = "outputs/type_lc_metrics.csv")
   
```

Extra step to load data from above processes to avoid rerunning slow processes

```{r}
#load land cover results (which includes eoo) to avoid rerunning slow terra commands
type_lc_metrics <- read.csv("outputs/type_lc_metrics.csv") 


```

RLE and ETS assessment of wetland ecosystem types

```{r}

#summarise by wetland type including  area per type per condition class - this allows for inclusion of condition in the RLE formula

#overall summary
wet_type_24 <- wet_tb %>%
    group_by(type, pes24) %>%
  summarise(area_sum = sum(as.numeric(area_m2), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes24, values_from = area_sum, values_fill = list(area_sum = 0))  %>%
  mutate(type_m2 = rowSums(across(c(A, B, C, D, E, F, DD))))

wet_type_18 <- wet_tb %>%
    group_by(type, pes18) %>%
  summarise(area_sum = sum(as.numeric(area_m2), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes18, values_from = area_sum, values_fill = list(area_sum = 0)) %>%
  rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F, DD18 = DD)
 


```

```{r}
# Join the tables above - this makes a single table in which all the required metrics can be found to compute EPL and RLE
 
wet_type_metrics <- wet_type_24 %>%
  left_join(wet_type_18, by = "type") %>%
   left_join(type_lc_metrics, by = "type") %>%
  # Metrics for RLE  
    mutate(prp18_cdef = ( C18 + D18 + E18 + F18)/(type_m2-DD18) ) %>% 
    mutate(prp18_def = ( D18 + E18 + F18 )/(type_m2-DD18)) %>%   
    mutate(prp18_ef= (E18 + F18)/(type_m2-DD18)) %>%
    mutate(prp24_cdef = ( C + D + E + F)/(type_m2-DD)) %>%    
    mutate(prp24_def = ( D + E + F )/(type_m2-DD)) %>%    
    mutate(prp24_ef= (E + F)/(type_m2-DD)) %>%
  # Ongoing decline =  length of good wet (ABC) declines by >1% from t1 to t2
    mutate(pes_decline1824 = ifelse(
      (((A18 + B18 + C18  ) - (A + B + C  ))
      / (A18 + B18 + C18 )) 
      > 0.01 | (A+B == 0), "decline1824", "nodecline1824"))  %>%    
  # Metrics for SA ETS  
   mutate(prp18_ab = (A18+B18)/type_m2) %>%
   mutate(prp18_abc = (A18+B18+C18+DD)/type_m2) %>%
   mutate(prp24_ab = (A+B)/type_m2) %>%
   mutate(prp24_abc = (A+B+C+DD)/type_m2) %>%
# D3 assessment using PES as measure of functional decline due to biotic disruption (and environmental degradation) PES EF ~ 90%-100% severity; DEF ~ 70%-100% severity; CDEF ~ 50%-100% severity
# add D3 using PES scores for severity estimates: EF >=90% severity, DEF >=70-% severity, CDEF>=50% severity
    mutate(D3_18 = case_when( prp18_ef >= 0.9 ~ "CR", 
                              prp18_ef >= 0.7 | prp18_def >=0.9 ~ "EN",
                              prp18_ef >= 0.5 | prp18_def >=0.7 | 
                                                prp18_cdef >= 0.9 ~ "VU", 
                                 TRUE ~ "LC")) %>% 
            mutate(D3_18 = factor(D3_18, levels = c("LC","VU", "EN", "CR"), ordered = TRUE)) %>%
    mutate(D3_24 = case_when( prp24_ef >= 0.9 ~ "CR", 
                              prp24_ef >= 0.7 | prp24_def >=0.9 ~ "EN",
                              prp24_ef >= 0.5 | prp24_def >=0.7 | 
                                               prp24_cdef >= 0.9 ~ "VU", 
                               TRUE ~ "LC")) %>%
  # D1 assessment 
   mutate(D1_18 = case_when( prp18_ef >= 0.8 ~ "CR", 
                              prp18_ef >= 0.5 | prp18_def >=0.8 ~ "EN",
                              prp18_ef >= 0.3 | prp18_def >=0.5 | 
                                                prp18_cdef >= 0.8 ~ "VU", 
                                 TRUE ~ "LC")) %>% 
                mutate(D1_24 = case_when( prp24_ef >= 0.8 ~ "CR", 
                              prp24_ef >= 0.5 | prp24_def >=0.8 ~ "EN",
                              prp24_ef >= 0.3 | prp24_def >=0.5 | 
                                               prp24_cdef >= 0.8 ~ "VU", 
                                 TRUE ~ "LC")) %>%
  #  B1aii using ongoing decline calculated above add 2018 when PES data is available
   mutate(B1aii_24 = case_when( pes_decline1824 == "decline1824" & eoo_km2  <= 2000 ~ "CR",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 20000 ~ "EN",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   mutate(B1aii_18 = case_when( pes_decline1824 == "decline1824" & eoo_km2  <= 2000 ~ "CR",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 20000 ~ "EN",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   # re order cols 
    relocate(A2b_18, A3_18, B1ai_18, B1aii_18, D1_18,D3_18, A2b_24, A3_24, 
             B1ai_24, B1aii_24, D1_24, D3_24,  .after = pes_decline1824) %>%
  # overall RLE outcome
  # make all assessments factors to get MAX 
    mutate(across( c(A2b_18, A3_18, B1ai_18, B1aii_18, D1_18,D3_18, A2b_24, A3_24, B1ai_24, B1aii_24, D1_24, D3_24), 
                   ~ factor(., levels = c("LC", "VU", "EN", "CR"), ordered = TRUE)  ))  %>%
 # Ensure highest risk cateroy is assiged 
   rowwise() %>%
     mutate(RLE18 = max(c_across(c(A2b_18, A3_18, B1ai_18, B1aii_18, D1_18,D3_18)), na.rm = TRUE), 
            RLE24 = max(c_across(c(A2b_24, A3_24, B1ai_24, B1aii_24, D1_24, D3_24)), na.rm = TRUE)) %>%
   ungroup() %>%
 # Add van Deventer 2018 ETS method: assuming A and B are intact rest is lost but also counting C towards VU (use DDfec as PES C)
    mutate(A3sa_24 = case_when( prp24_ab < 0.2 ~ "CR", 
                                prp24_ab < 0.35 ~ "EN",
                                prp24_abc < 0.6 ~ "VU", 
                                 TRUE ~ "LC")) %>%
    mutate(A3sa_18 = case_when( prp18_ab < 0.2 ~ "CR", 
                                prp18_ab < 0.35 ~ "EN",
                                prp18_abc < 0.6 ~ "VU", 
                                 TRUE ~ "LC")) %>%
     # add in HGM type
   left_join(type_hgm_tb, by = "type") %>%
   relocate(hgm, .after = type)
   
   
   # export a csv of results - Condition and EPL per river type 2018 and 2024
   write_csv(wet_type_metrics, file = "outputs/rle_wet_metrics_per_type.csv")
```

RLE Summary per HGM zone

```{r}

# make summary counts of RLE categories per Wetland HGM4A Zones  IUCN approach D3 & B
#wet_type_metrics <- read_csv("outputs/rle_wet_metrics_per_type.csv") 

# 2024 summaries IUCN RLE approach COUNTS Criterion D3 and B1 per Wetland HGM4A Zone

rle24_sum <- wet_type_metrics %>%
    group_by(RLE24, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = RLE24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - COUNT of RLE 24 per slope zone
 write_csv(rle24_sum, file = "outputs/rle24_wet_count.csv")
 

# make summary of extent of RLE 2024 for ploting 
 rle24_ext <- wet_type_metrics %>%
    group_by(RLE24, hgm) %>%
  summarise(extent = round(sum(type_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = RLE24, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle24_ext, file = "outputs/rle24_wet_ext.csv")
  
# Convert extent per rle category to proportion 
  rle24_prpext <- rle24_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c( CR,EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm,  CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle24_prpext, file = "outputs/rle24_wet_prp.csv")
   
# 2018 summaries IUCN RLE approach 
      rle18_sum <- wet_type_metrics %>%
    group_by(RLE18, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = RLE18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - COUNT of RLE 18 per slope zone
 write_csv(rle18_sum, file = "outputs/rle18_wet_count.csv") 
 
 # make summary of extent of RLE 2018 for ploting 
 rle18_ext <- wet_type_metrics %>%
    group_by(RLE18, hgm) %>%
  summarise(extent = round(sum(type_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = RLE18, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle18_ext, file = "outputs/rle18_wet_ext.csv")
  
```

ETS Summary per HGM zone

```{r}
# RLE A3 SA methods results 
# COUNTS - summary for 2024 using SA methods 
rle24sa_sum <- wet_type_metrics %>%
    group_by(A3sa_24, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
  
  # export a csv of results - COUNT of SA RLE 24 per hgm
   write_csv(rle24sa_sum, file = "outputs/rle24sa_wet_count.csv")

# COUNTS - summary for 2018 using SA methods 
   rle18sa_sum <- wet_type_metrics %>%
    group_by(A3sa_18, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
 mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)

# export a csv of results - COUNT of RLE 24 per slope zone
   write_csv(rle18sa_sum, file = "outputs/rle18sa_wet_count.csv")
   
#EXENTS - summary for 2024  using SA methods 
 rle24sa_ext <- wet_type_metrics %>%
    group_by(A3sa_24, hgm) %>%
  summarise(extent = round(sum(type_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle24sa_ext, file = "outputs/rle24sa_wet_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle24sa_prpext <- rle24sa_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle24sa_prpext, file = "outputs/rle24sa_wet_prp.csv") 
   
   #EXENTS - summary for 2018  using SA methods 
  
 rle18sa_ext <- wet_type_metrics %>%
    group_by(A3sa_18, hgm) %>%
  summarise(extent = round(sum(type_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle18sa_ext, file = "outputs/rle18sa_wet_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle18sa_prpext <- rle18sa_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle18sa_prpext, file = "outputs/rle18sa_wet_prp.csv") 
```

#### **Make graphs for NBA**

```{r}
# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)
```

IUCN RLE plots for 2024 and 2018

```{r}
#  Use NBA package to make RLE  2024  plot  using  IUCN RLE v2

pd_rle24_count <- rle24_sum %>%
    rename( `Critically Endangered` = CR,
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24_barplot_count <- nba_plot(pd_rle24_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                 SAVE = NULL,
                 SCALE_TEXT = 0.6)

rle24_barplot_count <- rle24_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle24_wet_barplot_count.jpeg", # File name
  plot = rle24_barplot_count,                  # Plot object
    width = 9, height = 7, units = "cm",   # Dimensions
     dpi = 300 )                              # Resolution

## Make plots of extent per slope zone RLE approach  #########################################################

# 2024  plots of extent of RLE  
pd_rle24_ext <- rle24_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle24_barplot_ext <- nba_plot(pd_rle24_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle24_barplot_ext <- rle24_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle24_wet_barplot_ext.jpeg", # File name
  plot = rle24_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# 2018 plots of extent of RLE SA 

pd_rle18_ext <- rle18_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle18_barplot_ext <- nba_plot(pd_rle18_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18_barplot_ext <- rle18_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5))

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle18_wet_barplot_ext.jpeg", # File name
  plot = rle18_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

```

ETS (SA methods) plots for 2024 and 2018

```{r}
# Use NBA package to make ETS  2024  plot  using  Nel 2011 methods
pd_rle24sa_count <- rle24sa_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24sa_barplot_count <- nba_plot(pd_rle24sa_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                 SAVE = NULL,
                 SCALE_TEXT = 0.6)

rle24sa_barplot_count <- rle24sa_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the 2024 plot of counts 
ggsave( 
  filename = "outputs/rle24sa_wet_barplot_count.jpeg",  # File name
  plot = rle24sa_barplot_count,                         # Plot object
    width = 9, height = 7, units = "cm",                # Dimensions
     dpi = 300)                                         # Resolution


# Use NBA package to make ETS  2018  plot  using  Nel 2011 methods
pd_rle18sa_count <- rle18sa_sum %>%
    rename( `Critically Endangered` = CR,
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle18sa_barplot_count <- nba_plot(pd_rle18sa_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18sa_barplot_count <- rle18sa_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph
ggsave(
  filename = "outputs/rle18sa_wet_barplot_count.jpeg", # File name
  plot = rle18sa_barplot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

## Make plots of extent per slope zone ETS methods  #########################################################

# 2024  plots of extent of RLE SA 
pd_rle24sa_ext <- rle24sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle24sa_barplot_ext <- nba_plot(pd_rle24sa_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle24sa_barplot_ext <- rle24sa_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle24sa_wet_barplot_ext.jpeg", # File name
  plot = rle24sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# 2018 plots of extent of RLE SA 

pd_rle18sa_ext <- rle18sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle18sa_barplot_ext <- nba_plot(pd_rle18sa_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18sa_barplot_ext <- rle18sa_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5))

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle18sa_wet_barplot_ext.jpeg", # File name
  plot = rle18sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

```

Plot of Red List Index of Ecosystems for 2018 and 2014 using RLE

```{r}
## RLIE plot 2018-2014 using RLE ################################

RLIE <- rle24_sum %>%
  select(hgm, RLIE) %>% 
  rename(RLIE24 = RLIE) %>%
   left_join(rle18_sum, by ="hgm") %>%
   rename(RLIE18 = RLIE) %>%
   rename(Zone = hgm) %>%
  select(Zone,RLIE18, RLIE24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "RLIE") %>%
    mutate(Year = case_when(
    Year == "RLIE18" ~ "2018",
    Year == "RLIE24" ~ "2024",
    TRUE ~ Year
  ))

rlie_plot <- ggplot(RLIE, aes(x = Year, y = RLIE, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "RLIE") +
  scale_x_discrete(limits = c("2018", "2024"), expand = c(0, 0)) +
  scale_color_manual(values = c(
    "Total" = "black",
    "Depression" = "blue",
    "Floodplain" = "darkgreen",
    "Seep" = "brown",
    "Unchannelled valley-bottom" = "orange"
  )) +
  coord_cartesian(ylim = c(0.3, 0.9)) +
    guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
    theme(
  legend.title = element_blank(),
  legend.position = "bottom",
  legend.text = element_text(size = 6),
  axis.title.x = element_text(margin = margin(t = 8)),    # Add space above x-axis label
  plot.margin = margin(5, 5, 15, 5)                        # Add space around plot (esp. bottom)
)
 
  
  #export the graph
ggsave(
  filename = "outputs/rlie_plot.jpeg", # File name
  plot = rlie_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 9, units = "cm"   # Dimensions
)

```

RLIe using SA methods

```{r}
## RLIE plot 2018-2014 using SA methods  ################################

RLIEsa <- rle24sa_sum %>%
  select(hgm, RLIE) %>% 
  rename(RLIE24 = RLIE) %>%
   left_join(rle18sa_sum, by ="hgm") %>%
   rename(RLIE18 = RLIE) %>%
   rename(Zone = hgm) %>%
  select(Zone,RLIE18, RLIE24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "RLIE") %>%
    mutate(Year = case_when(
    Year == "RLIE18" ~ "2018",
    Year == "RLIE24" ~ "2024",
    TRUE ~ Year
  ))

rliesa_plot <- ggplot(RLIEsa, aes(x = Year, y = RLIE, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "RLIE") +
  scale_x_discrete(limits = c("2018", "2024"), expand = c(0, 0)) +
  scale_color_manual(values = c(
    "Total" = "black",
    "Depression" = "blue",
    "Floodplain" = "darkgreen",
    "Seep" = "brown",
    "Unchannelled valley-bottom" = "orange"
  )) +
  coord_cartesian(ylim = c(0.3, 0.9)) +
    guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
    theme(
  legend.title = element_blank(),
  legend.position = "bottom",
  legend.text = element_text(size = 6),
  axis.title.x = element_text(margin = margin(t = 8)),    # Add space above x-axis label
  plot.margin = margin(5, 5, 15, 5)                        # Add space around plot (esp. bottom)
)
 
  
  #export the graph
ggsave(
  filename = "outputs/rliesa_plot.jpeg", # File name
  plot = rliesa_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 9, units = "cm"   # Dimensions
)

```
