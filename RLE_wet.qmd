---
title: "RLE_riv"
format: html
---

### Set up the Project and import the data

```{r}
# Add packages: 

library(sf)
library(tidyverse)
library(stringr)
library(terra)
library(PROJ)

# Add data
# Replace with your actual file path and layer name if needed
wetlands <- st_read("C:/Users/skownoa/Dropbox/NBAwork/Wetlands/wetl_NBA_20250811.gpkg")
wetlands <- wetlands %>% mutate(fid = row_number())
#ensure it uses proj =  wgs84 aea cm 25 -24 -33
# st_crs(wetlands)

```

### Clean up input data

```{r}
## Clean up this version : there are 215 NA in type,  filter these out. Deal with NAs by using condition when available and fill cond if pes available, then fill forward and back between 2014 and 2018, then remove NA pes left over

options(scipen = 999)

wet <- wetlands %>%
  # add area column 
  mutate(area_m2 = as.numeric(st_area(geom))) %>%
  # remove rows with NA in New_name (do  sum(is.na(wetlands$type)) to check numer there are 215)
  filter(!is.na(type)) %>% 
  # clean up PES (NA) and EC (/by zero issues)
  mutate(pes24 = ifelse(EC22ALL == "#DIV/0!" | EC22ALL == "0" , NA , EC22ALL) ) %>%
  mutate(pes18 = ifelse(EC18ALL == "#DIV/0!" | EC18ALL == "0" | EC18ALL == "fix", NA, EC18ALL) ) %>%
  mutate(cond24 = ifelse(PES22ALL < 0 , NA, PES22ALL), 
         cond18 = ifelse(PES18ALL < 0 , NA, PES18ALL)) %>%
  # if pes2024 is NA but cond24 is 0 make pes F 
  #mutate(pes24 = ifelse(is.na(pes24) & cond24 == 0, "F" , pes24)) %>%
  # if pes2018 is missing use 2024  if 2024 missing use 2018 ? 
  mutate(pes24 = ifelse(is.na(pes24) & !is.na(pes18), pes18, pes24)) %>%
  mutate(pes18 = ifelse(is.na(pes18) & !is.na(pes24), pes24, pes18)) %>%  
    # now deal with some pes but missing cond (D2)
    mutate(cond24 = case_when(( is.na(cond24)) & pes24 == "A" ~ 95, 
                            ( is.na(cond24)) & pes24 == "B" ~ 65,
                            ( is.na(cond24)) & pes24 == "C" ~ 40,
                            ( is.na(cond24)) & pes24 == "D" ~ 20,
                            ( is.na(cond24)) & pes24 == "E" ~ 8,
                            ( is.na(cond24)) & pes24 == "F" ~ 4, 
                            TRUE ~ cond24)) %>%
    mutate(cond18 = case_when(( is.na(cond18)) & pes18 == "A" ~ 95, 
                              ( is.na(cond18)) & pes18 == "B" ~ 65,
                              ( is.na(cond18)) & pes18 == "C" ~ 40,
                              ( is.na(cond18)) & pes18 == "D" ~ 20,
                              ( is.na(cond18)) & pes18 == "E" ~ 8,
                              ( is.na(cond18)) & pes18 == "F" ~ 4, 
                              TRUE ~ cond18)) %>%
  # if pes2024  is still missing after all possible fixes  remove from dataset 
 filter(!is.na(pes24))

# remove geometry for quicker summaries
wet_tb <- st_drop_geometry(wet)
  
# make a simple table of TYPE and HGM to join with results later 
  type_hgm_tb <- wet_tb %>% select(type, hgm) %>% distinct(type, .keep_all = TRUE)

#   # check cols
#  sort(unique(wet$bioregion)) 
#  
# # write new spatial output for Nancy using terra as sf outputs a gpkg that cant be read by ARCGIS due to WKT # 
# # BUT NOTE YOU CANT DO THIS IN CUSTOM CRS SO USED UNPROJECTED WGS84 
# wet_v <- wetlands %>%
#       left_join(st_drop_geometry(wet_tb), by = "fid") %>%
#       relocate(pes24, .after = pes18) %>%
#       mutate(area_m2 = as.numeric(area_m2))
# 
# wet_v_dd <- st_transform(wet_v, 4326)
# st_write(wet_v_dd, "C:/Users/skownoa/Dropbox/NBAwork/Wetlands/wetlands_20250731.gpkg", delete_dsn = TRUE) 


```

**Calculate EOO using convex hulls in sf**

```{r}
# Initialize a list to store results
eoo_list <- list()

# Iterate through unique WET TYPE values 
for (wet_type in unique(wet$type)) {
  subset_data <- wet %>% filter(type == wet_type)
  if (nrow(subset_data) > 0) {
    convex_hull <- st_convex_hull(st_union(subset_data))
    hull_area <- st_area(convex_hull)
    eoo_list[[wet_type]] <- as.numeric(hull_area)
  }
}

eoo_df <- data.frame(
  type = names(eoo_list),
  AREA_EOO = unlist(eoo_list)
) %>%
  mutate(eoo_km2 = AREA_EOO/1000000) %>%
  select(!AREA_EOO)

write.csv(eoo_df, "outputs/EOO_all.csv")
#eoo_df <- read.csv("C:/Rdata/RLE_wet/outputs/EOO_all.csv")

```

**Criterion A2b A3 and B1ai (using rod) calculation**

```{r}
# cross tab estuaries with land cover 1990, 2014, 2018 and 2022 and calculate extent lost and rate of loss

#Add data 
lc1990 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc1990_7class.tif") 
lc2014 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2014_7class.tif")
lc2018 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2018_7class.tif")
lc2022 <- rast("C:/Users/skownoa/Dropbox/NBAwork/NLC_change/nlc2022_7class.tif")

# Extract raster values under each polygon, return ID
extract1990 <- extract(lc1990, wet)
extract1990$type <- wet$type[extract1990$ID] # note - indexing not a join
tb1990 <- extract1990 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 1990)

extract2018 <- extract(lc2018, wet)
extract2018$type <- wet$type[extract2018$ID] # note - indexing not a join
tb2018 <- extract2018 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 2018)

extract2022 <- extract(lc2022, wet)
extract2022$type <- wet$type[extract2022$ID] # note - indexing not a join
tb2022 <- extract2022 %>%
  count(type, class = .[[2]], name = "Freq") %>%
  mutate(YEAR = 2022)

# combine the results
lc7_list = list(tb1990,tb2018,tb2022) 
lc7_rall <- lc7_list %>%  bind_rows() %>%   
  as_tibble()

# save to avoid rerunning extracts
write_csv(lc7_rall, file = "outputs/lc7_rall.csv")

lc7_rall <- read_csv("outputs/lc7_rall.csv") 

type_ras_ext <- lc7_rall %>%   
  filter(YEAR == 2022) %>%
  group_by(YEAR, type) %>% 
  summarise(tot_m2 = sum(Freq*400),.groups = "drop") %>%
  pivot_wider(names_from = "YEAR", values_from = "tot_m2") %>%
  rename(type_area = `2022`)

type_nat_ext <- lc7_rall %>%   
  filter(class == 1| is.na(class)) %>% 
  group_by(YEAR, type) %>% 
  summarise(nat_m2 = sum(Freq*400),.groups = "drop") %>%
  pivot_wider(names_from = "YEAR", values_from = "nat_m2", names_glue = "nat{YEAR}")

type_lc_metrics <- type_ras_ext %>%
  left_join(eoo_df, by = "type") %>%
  left_join(type_nat_ext, by = "type") %>%
   #metrics for A3
  mutate(prpnat1990 = nat1990/type_area, prpnat2018 = nat2018/type_area, prpnat2022 = nat2022/type_area) %>%
  #metrics for A2b
  mutate(ard9022 = (nat1990-nat2022)/(2022-1990)) %>%
  mutate(nat40_9022 = nat1990 - (ard9022*50))  %>%
  mutate(prplost9040_9022 = (nat1990-nat40_9022)/nat1990) %>%
  mutate(ard1822 = (nat2018-nat2022)/(2022-2018)) %>%
  mutate(nat40_1822 = nat2018 - (ard1822*50))  %>%
  mutate(prplost9040_1822 = (nat1990-nat40_1822)/nat1990) %>%
  mutate(ard9018 = (nat1990-nat2018)/(2018-1990)) %>%
  mutate(nat40_9018 = nat1990 - (ard9018*50))  %>%
  mutate(prplost9040_9018 = (nat1990-nat40_9018)/nat1990) %>%
  mutate(rod9022 = prplost9040_9022/50*100) %>%
  mutate(rod1822 = prplost9040_1822/50*100) %>%
  mutate(rod9018 = prplost9040_9018/50*100) %>%
      # assessments 2024
  mutate(A3_24 = case_when(prpnat2022 < 0.1 ~ "CR",
                        prpnat2022 < 0.3 ~ "EN", 
                        prpnat2022 < 0.5 ~ "VU", 
                        TRUE ~"LC")) %>%
  mutate(A2b_24 = case_when(prplost9040_1822 >= 0.8 ~ "CR",
                         prplost9040_1822 >= 0.5 ~ "EN",
                         prplost9040_1822 >= 0.3 ~ "VU", 
                         TRUE ~ "LC")) %>%
  mutate(B1ai_24 = case_when( rod1822 >= 0.3  & eoo_km2  <= 2000 ~ "CR",
                              rod1822 >= 0.3  & eoo_km2   <= 20000 ~ "EN",
                              rod1822 >= 0.3  & eoo_km2   <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
# assessments 2018
  mutate(A3_18 = case_when(prpnat2018 < 0.1 ~ "CR",
                        prpnat2018 < 0.3 ~ "EN", 
                        prpnat2018 < 0.5 ~ "VU", 
                        TRUE ~"LC")) %>%
  mutate(A2b_18 = case_when(prplost9040_9018 >= 0.8 ~ "CR",
                         prplost9040_9018 >= 0.5 ~ "EN",
                         prplost9040_9018 >= 0.3 ~ "VU", 
                         TRUE ~ "LC")) %>%
  mutate(B1ai_18 = case_when( rod9018 >= 0.3  & eoo_km2  <= 2000 ~ "CR",
                              rod9018 >= 0.3  & eoo_km2   <= 20000 ~ "EN",
                              rod9018 >= 0.3  & eoo_km2   <= 50000 ~ "VU",
                                 TRUE ~ "LC"))

# Export a csv of results - Condition and EPL per river type 2018 and 2024
   write_csv(type_lc_metrics, file = "outputs/type_lc_metrics.csv")
   
```

**Extra step to load data from above processes to avoid rerunning slow processes**

```{r}
#load land cover results (which includes eoo) to avoid rerunning slow terra commands
#type_lc_metrics <- read.csv("outputs/type_lc_metrics.csv") 


```

**RLE and ETS assessment of wetland ecosystem types - based on overall PES and Condition Scores**

```{r}

#summarise by wetland type including  area per type per condition class - this allows for inclusion of condition in the RLE formula

#overall summary
wet_type_24 <- wet_tb %>%
    group_by(type, pes24) %>%
  summarise(area24_sum = sum(as.numeric(area_m2), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes24, values_from = area24_sum, values_fill = list(area24_sum = 0))  %>%
  mutate(type24_m2 = rowSums(across(c(A, B, C, D, E, F)))) 
  

wet_type_18 <- wet_tb %>%
    group_by(type, pes18) %>%
  summarise(area18_sum = sum(as.numeric(area_m2), na.rm = TRUE)) %>%
  ungroup() %>%
  pivot_wider(names_from = pes18, values_from = area18_sum, values_fill = list(area18_sum = 0)) %>%
  mutate(type18_m2 = rowSums(across(c(A, B, C, D, E, F)))) %>%
  rename(A18=A, B18=B, C18=C, D18=D, E18=E, F18=F) 
 
# PES results 24 for booklet narratives
pes24_stats <- wet_type_24 %>%
    bind_rows(summarise(., type = "Total", across(where(is.numeric), ~sum(., na.rm = TRUE)) ) ) %>%
  mutate(prp24_ab = (A+B)/type24_m2, prp24_def = (D+E+F)/type24_m2)

pes18_stats <- wet_type_18 %>%
    bind_rows(summarise(., type = "Total", across(where(is.numeric), ~sum(., na.rm = TRUE)) ) ) %>%
  mutate(prp18_ab = (A18+B18)/type18_m2, prp18_def = (D18+E18+F18)/type18_m2)
  

  write.csv(pes24_stats, file = "outputs/wet_pes24_per_type.csv")
  write.csv(pes18_stats, file = "outputs/wet_pes18_per_type.csv")

```

**Prepare for focused assessments of each element of decline PES22VEG**

```{r}
cscores <- wet_tb %>%
    group_by(type) %>%
    summarise(across(
    c(call24 = cond24,
      call18 = cond18,
      cveg24 = PES22VEG,
      cveg18 = PES18VEG,
      cwq24  = PES22WQ,
      cwq18  = PES18WQ,
      cgeo24 = PES22GEO,
      cgeo18 = PES18GEO,
      chyd24 = PES22HYD,
      chyd18 = PES18HYD),
    ~ sum(.x / 100 * area_m2, na.rm = TRUE))) %>% 
  ungroup() %>%
  left_join(wet_type_24, by  = "type") %>% 
  # make an index with 1 = 100% severity and 0 = 0% severity
  mutate(across(
    c(call24, call18, cveg24, cveg18, cwq24, cwq18, cgeo24, cgeo18, chyd24, chyd18),
    ~ 1 - pmin(pmax(.x / type24_m2, 0), 1)
  )) %>%
     select(type, call24, call18, cveg24, cveg18, cwq24,cwq18, cgeo24, cgeo18, chyd24, chyd18 )
```

**Build table of Assessments**

```{r}
# Join the tables above - this makes a single table in which all the required metrics can be found to compute EPL and RLE
 
wet_type_metrics <- wet_type_24 %>%
  left_join(wet_type_18, by = "type") %>%
  left_join(cscores, by = "type") %>%
  left_join(eoo_df, by = "type") %>%
# Metrics for RLE  
  # Calculate for D2 -  rate of decline in PES scores over a 50 year period 2018 to 2068    
  mutate(call68 = pmin(pmax(call18 + ((call24 - call18) / (2022 - 2018) * 46), 0), 1)) %>%
  mutate(cond_decline = pmin(pmax((call68 - call18) / call18, 0), 1)) %>% 
  relocate(call68, .before = call24) %>%
  # Calculate overall proportion in each pes group of severity  for D3 
    mutate(prp18_bcdef = ( B18 + C18 + D18 + E18 + F18)/(type18_m2)) %>%   
    mutate(prp18_cdef = ( C18 + D18 + E18 + F18)/(type18_m2) ) %>% 
    mutate(prp18_def = ( D18 + E18 + F18 )/(type18_m2)) %>%   
    mutate(prp18_ef = (E18 + F18)/(type24_m2)) %>%
    mutate(prp24_bcdef = ( B+ C + D + E + F)/(type24_m2)) %>%    
    mutate(prp24_cdef = ( C + D + E + F)/(type24_m2)) %>%    
    mutate(prp24_def = ( D + E + F )/(type24_m2)) %>%    
    mutate(prp24_ef= (E + F)/(type24_m2)) %>%
  # Ongoing decline =  area of poor condition increases
    mutate(pes_decline1824 = ifelse(prp24_def > prp18_def, "decline1824", "nodecline1824"))  %>%
  # Metrics for SA ETS  
   mutate(prp18_ab = (A18+B18)/type18_m2) %>%
   mutate(prp18_abc = (A18+B18+C18)/type18_m2) %>%
   mutate(prp24_ab = (A+B)/type24_m2) %>%
   mutate(prp24_abc = (A+B+C)/type24_m2) %>%
#D2 decline in PES  over 50 year period 
    mutate(D2_24 = case_when(    cond_decline >= 0.8 ~ "CR", 
                                 cond_decline >= 0.5 ~ "EN",
                                 cond_decline >= 0.3 ~ "VU", 
                                 TRUE ~ "LC")) %>%
   mutate(D2_18 = D2_24) %>% 
  # PES 2014 unreliable to cannot be used to get rate - assumed to be same t1 and t2 
# D3 assessment using PES as measure of functional decline due to biotic disruption /degradation
  mutate(D3_18 = case_when( prp18_ef >= 0.9 ~ "CR", 
                              prp18_ef >= 0.7 | prp18_def >=0.9 ~ "EN",
                              prp18_ef >= 0.5 | prp18_def >=0.7 | 
                                                prp18_cdef >= 0.9 ~ "VU", 
                                 TRUE ~ "LC")) %>% 
  mutate(D3_24 = case_when( prp24_ef >= 0.9 ~ "CR", 
                              prp24_ef >= 0.7 | prp24_def >=0.9 ~ "EN",
                              prp24_ef >= 0.5 | prp24_def >=0.7 | 
                                               prp24_cdef >= 0.9 ~ "VU", 
                               TRUE ~ "LC")) %>%  
  #####ADD in an option that is much stricter on PES severity   
  mutate(D3b_18 = case_when(  prp18_def >= 0.9 ~ "CR",
                              prp18_def >= 0.7 | prp18_cdef >=0.9 ~ "EN",
                              prp18_def >= 0.5 | prp18_cdef >=0.7 |
                                                prp18_bcdef >= 0.9 ~ "VU",
                                 TRUE ~ "LC")) %>%
   mutate(D3b_24 = case_when( prp24_ef >= 0.9 ~ "CR",
                               prp24_ef >= 0.7 | prp24_def >=0.9 ~ "EN",
                               prp24_ef >= 0.5 | prp24_def >=0.7 |
                                               prp24_bcdef >= 0.9 ~ "VU",
                               TRUE ~ "LC")) %>%
####### NEW D3 per element of functional decline veg, wq, geo, hydro
 mutate(across(
    c(cveg24, cwq24, cgeo24, chyd24, cveg18, cwq18, cgeo18, chyd18),
    ~ case_when(
      .x >= 0.9 ~ "CR",
      .x >= 0.7 ~ "EN",
      .x >= 0.5 ~ "VU",
      TRUE      ~ "LC"
    ),
    .names = "D3{.col}"
 ))  %>%          
  # B1aii using ongoing decline calculated above add 2018 when PES data is available
   mutate(B1aii_24 = case_when( pes_decline1824 == "decline1824" & eoo_km2  <= 2000 ~ "CR",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 20000 ~ "EN",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   mutate(B1aii_18 = case_when( pes_decline1824 == "decline1824" & eoo_km2  <= 2000 ~ "CR",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 20000 ~ "EN",
                                pes_decline1824 == "decline1824" & eoo_km2  <= 50000 ~ "VU",
                                 TRUE ~ "LC")) %>%
   # re order cols 
    relocate(B1aii_18, D2_18, D3_18, D3b_18, D3cveg18, D3cwq18, D3cgeo18, D3chyd18, B1aii_24, D2_24, D3_24, D3cveg24, D3cwq24, D3cgeo24, D3chyd24,  .after = pes_decline1824) %>%
  # overall RLE outcome
  # make all assessments factors to get MAX 
    mutate(across( c(B1aii_18, D2_18,D3_18, D3b_18, D3cveg18, D3cwq18, D3cgeo18, D3chyd18, B1aii_24, D2_24, D3_24, D3b_24,  D3cveg24, D3cwq24, D3cgeo24, D3chyd24), 
                   ~ factor(., levels = c("LC", "VU", "EN", "CR"), ordered = TRUE)  ))  %>%
 # Ensure highest risk cateroy is assiged 
   rowwise() %>%
     mutate(RLE18 = max(c_across(c(B1aii_18, D2_18,D3_18,  D3cveg18, D3cwq18, D3cgeo18, D3chyd18)), na.rm = TRUE), 
            RLE24 = max(c_across(c(B1aii_24, D2_24, D3_24,  D3cveg24, D3cwq24, D3cgeo24, D3chyd24)), na.rm = TRUE)) %>%
   ungroup() %>%
 # Add van Deventer 2018 ETS method: assuming A and B are intact rest is lost but also counting C towards VU (use DDfec as PES C)
    mutate(A3sa_24 = case_when( prp24_ab < 0.2 ~ "CR", 
                                prp24_ab < 0.35 ~ "EN",
                                prp24_abc < 0.6 ~ "VU", 
                                 TRUE ~ "LC")) %>%
    mutate(A3sa_18 = case_when( prp18_ab < 0.2 ~ "CR", 
                                prp18_ab < 0.35 ~ "EN",
                                prp18_abc < 0.6 ~ "VU", 
                                 TRUE ~ "LC")) %>%
     # add in HGM type
   left_join(type_hgm_tb, by = "type") %>%
   relocate(hgm, .after = type)
   
   
   # export a csv of results - Condition and EPL per river type 2018 and 2024
   write_csv(wet_type_metrics, file = "outputs/rle_wet_metrics_per_type.csv")
   
```

RLE Summary per HGM zone

```{r}

# make summary counts of RLE categories per Wetland HGM4A Zones  IUCN approach D3 & B
#wet_type_metrics <- read_csv("outputs/rle_wet_metrics_per_type.csv") 

expected_levels <- c("CR", "EN", "VU", "LC") # This is essential to make sure the pivot wider creates all cols even if no types are CR EN etc


# 2024 summaries IUCN RLE approach COUNTS Criterion D3 and B1 per Wetland HGM4A Zone

rle24_sum <- wet_type_metrics %>%
  mutate(RLE24 = factor(RLE24, levels = expected_levels)) %>%  
  group_by(RLE24, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  complete(RLE24, hgm, fill = list(count = 0)) %>%  # <--- fills missing combos
  pivot_wider(names_from = RLE24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - COUNT of RLE 24 per slope zone
 write_csv(rle24_sum, file = "outputs/rle24_wet_count.csv")
 

# make summary of extent of RLE 2024 for ploting 
 rle24_ext <- wet_type_metrics %>%
    mutate(RLE24 = factor(RLE24, levels = expected_levels)) %>%   
   group_by(RLE24, hgm) %>%
  summarise(extent = round(sum(type24_m2)/1000000, 0),.groups = 'drop') %>%
  complete(RLE24, hgm, fill = list(count = 0)) %>%  # <--- fills missing combos
   pivot_wider(names_from = RLE24, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle24_ext, file = "outputs/rle24_wet_ext.csv")
  
# Convert extent per rle category to proportion 
  rle24_prpext <- rle24_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c( CR,EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm,  CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle24_prpext, file = "outputs/rle24_wet_prp.csv")
   
# 2018 summaries IUCN RLE approach 
      rle18_sum <- wet_type_metrics %>%
    mutate(RLE18 = factor(RLE18, levels = expected_levels)) %>%  
         group_by(RLE18, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  complete(RLE18, hgm, fill = list(count = 0)) %>%  # <--- fills missing combos
        pivot_wider(names_from = RLE18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - COUNT of RLE 18 per slope zone
 write_csv(rle18_sum, file = "outputs/rle18_wet_count.csv") 
 
 # make summary of extent of RLE 2018 for ploting 
 rle18_ext <- wet_type_metrics %>%
   mutate(RLE18 = factor(RLE18, levels = expected_levels)) %>%  
   group_by(RLE18, hgm) %>%
  summarise(extent = round(sum(type18_m2)/1000000, 0),.groups = 'drop') %>%
  complete(RLE18, hgm, fill = list(count = 0)) %>%  # <--- fills missing combos
   pivot_wider(names_from = RLE18, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle18_ext, file = "outputs/rle18_wet_ext.csv")
  
```

ETS Summary per HGM zone

```{r}
# RLE A3 SA methods results 
# COUNTS - summary for 2024 using SA methods 
rle24sa_sum <- wet_type_metrics %>%
    group_by(A3sa_24, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
  mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
  
  # export a csv of results - COUNT of SA RLE 24 per hgm
   write_csv(rle24sa_sum, file = "outputs/rle24sa_wet_count.csv")

# COUNTS - summary for 2018 using SA methods 
   rle18sa_sum <- wet_type_metrics %>%
    group_by(A3sa_18, hgm) %>%
  summarise(count = n(),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = count, values_fill = 0) %>%
   relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
  # Add RLE index
 mutate(RLIE = (1-((CR*4)+(EN*3)+(VU*2)+(LC*0))/((CR+EN+VU+LC)*5)))  %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)

# export a csv of results - COUNT of RLE 24 per slope zone
   write_csv(rle18sa_sum, file = "outputs/rle18sa_wet_count.csv")
   
#EXENTS - summary for 2024  using SA methods 
 rle24sa_ext <- wet_type_metrics %>%
    group_by(A3sa_24, hgm) %>%
  summarise(extent = round(sum(type24_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_24, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle24sa_ext, file = "outputs/rle24sa_wet_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle24sa_prpext <- rle24sa_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle24sa_prpext, file = "outputs/rle24sa_wet_prp.csv") 
   
   #EXENTS - summary for 2018  using SA methods 
  
 rle18sa_ext <- wet_type_metrics %>%
    group_by(A3sa_18, hgm) %>%
  summarise(extent = round(sum(type18_m2)/1000000, 0),.groups = 'drop') %>%
  pivot_wider(names_from = A3sa_18, 
              values_from = extent, values_fill = 0) %>%
    relocate(VU, .after = EN) %>%
   # Add row-wise TOTAL
  rowwise() %>%
  mutate(Total = sum(c_across(where(is.numeric)))) %>%
  ungroup() %>%
  # Add TOTAL row (column-wise sums)
  bind_rows(summarise(., hgm = "Total", across(where(is.numeric), sum))) %>%
    mutate(hgm = factor(hgm, levels = c("Total", "Unchannelled valley-bottom" , "Seep", "Floodplain","Depression"), ordered = TRUE)) %>% ## ggplot plots inverted factors!
   arrange(hgm)
 
 # export a csv of results - EXTENT (km) of RLE 24 per slope zone
  write_csv(rle18sa_ext, file = "outputs/rle18sa_wet_ext.csv")
  
 # Convert extent per epl category to proportion 
  rle18sa_prpext <- rle18sa_ext %>%
  filter(hgm != "Total") %>%
  mutate(across(c(CR, EN, VU, LC), ~ round(.x / Total, 3))) %>%
  select(hgm, CR, EN, VU, LC)
  
  # export a csv of results - PROPORTIONAL EXTENT  (km) of RLE 24 per slope zone
   write_csv(rle18sa_prpext, file = "outputs/rle18sa_wet_prp.csv") 
```

#### **Make graphs for NBA**

```{r}
# load nbaR package : first run this in console devtools::install_github("SANBI-NBA/nbaR") 
library(nbaR)
```

IUCN RLE plots for 2024 and 2018

```{r}
#  Use NBA package to make RLE  2024  plot  using  IUCN RLE v2

pd_rle24_count <- rle24_sum %>%
    rename( `Critically Endangered` = CR,
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24_barplot_count <- nba_plot(pd_rle24_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                 SAVE = NULL,
                 SCALE_TEXT = 0.6)

rle24_barplot_count <- rle24_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the 2024 plot of counts 
ggsave(
  filename = "outputs/rle24_wet_barplot_count.jpeg", # File name
  plot = rle24_barplot_count,                  # Plot object
    width = 9, height = 7, units = "cm",   # Dimensions
     dpi = 300 )                              # Resolution

## Make plots of extent per slope zone RLE approach  #########################################################

# 2024  plots of extent of RLE  
pd_rle24_ext <- rle24_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle24_barplot_ext <- nba_plot(pd_rle24_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle24_barplot_ext <- rle24_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle24_wet_barplot_ext.jpeg", # File name
  plot = rle24_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# 2018 plots of extent of RLE SA 

pd_rle18_ext <- rle18_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle18_barplot_ext <- nba_plot(pd_rle18_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18_barplot_ext <- rle18_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5))

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle18_wet_barplot_ext.jpeg", # File name
  plot = rle18_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

```

ETS (SA methods) plots for 2024 and 2018

```{r}
# Use NBA package to make ETS  2024  plot  using  Nel 2011 methods
pd_rle24sa_count <- rle24sa_sum %>%
    rename(`Critically Endangered` = CR, 
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle24sa_barplot_count <- nba_plot(pd_rle24sa_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                 SAVE = NULL,
                 SCALE_TEXT = 0.6)

rle24sa_barplot_count <- rle24sa_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the 2024 plot of counts 
ggsave( 
  filename = "outputs/rle24sa_wet_barplot_count.jpeg",  # File name
  plot = rle24sa_barplot_count,                         # Plot object
    width = 9, height = 7, units = "cm",                # Dimensions
     dpi = 300)                                         # Resolution


# Use NBA package to make ETS  2018  plot  using  Nel 2011 methods
pd_rle18sa_count <- rle18sa_sum %>%
    rename( `Critically Endangered` = CR,
           `Endangered` = EN, 
           `Vulnerable` = VU, 
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV
 
rle18sa_barplot_count <- nba_plot(pd_rle18sa_count,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = TRUE,
                 LAB = "Percentage of ecosystem types",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18sa_barplot_count <- rle18sa_barplot_count +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph
ggsave(
  filename = "outputs/rle18sa_wet_barplot_count.jpeg", # File name
  plot = rle18sa_barplot_count,                  # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

## Make plots of extent per slope zone ETS methods  #########################################################

# 2024  plots of extent of RLE SA 
pd_rle24sa_ext <- rle24sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle24sa_barplot_ext <- nba_plot(pd_rle24sa_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle24sa_barplot_ext <- rle24sa_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5)) 

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle24sa_wet_barplot_ext.jpeg", # File name
  plot = rle24sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

# 2018 plots of extent of RLE SA 

pd_rle18sa_ext <- rle18sa_ext %>%
     rename(`Critically Endangered` = CR,
           `Endangered` = EN,
           `Vulnerable` = VU,
           `Least Concern` = LC ) # %>%
  # select(-...1) # required if importing from CSV

rle18sa_barplot_ext <- nba_plot(pd_rle18sa_ext,
                  `hgm`,
                  2:5,
                 CHRT = "bar",
                 NUM = FALSE,
                 LAB = "Percentage of ecosystem extent (km)",
                SCALE_TEXT = 0.6,
                 SAVE = NULL)

rle18sa_barplot_ext <- rle18sa_barplot_ext +
  theme(
    legend.position = "bottom",             # keep it at the bottom
    legend.margin = margin(l = -45, r = -5, t = -5, b = -5))

#export the graph of SA RLE 2014 extent summary 
ggsave(
  filename = "outputs/rle18sa_wet_barplot_ext.jpeg", # File name
  plot = rle18sa_barplot_ext,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 7, units = "cm",   # Dimensions
  dpi = 300                               # Resolution
)

```

Plot of Red List Index of Ecosystems for 2018 and 2014 using RLE

```{r}
## RLIE plot 2018-2014 using RLE ################################

RLIE <- rle24_sum %>%
  select(hgm, RLIE) %>% 
  rename(RLIE24 = RLIE) %>%
   left_join(rle18_sum, by ="hgm") %>%
   rename(RLIE18 = RLIE) %>%
   rename(Zone = hgm) %>%
  select(Zone,RLIE18, RLIE24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "RLIE") %>%
    mutate(Year = case_when(
    Year == "RLIE18" ~ "2018",
    Year == "RLIE24" ~ "2024",
    TRUE ~ Year
  ))

rlie_plot <- ggplot(RLIE, aes(x = Year, y = RLIE, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "RLIE") +
  scale_x_discrete(limits = c("2018", "2024"), expand = c(0, 0)) +
  scale_color_manual(values = c(
    "Total" = "black",
    "Depression" = "blue",
    "Floodplain" = "darkgreen",
    "Seep" = "brown",
    "Unchannelled valley-bottom" = "orange"
  )) +
  coord_cartesian(ylim = c(0.3, 0.9)) +
    guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
    theme(
  legend.title = element_blank(),
  legend.position = "bottom",
  legend.text = element_text(size = 6),
  axis.title.x = element_text(margin = margin(t = 8)),    # Add space above x-axis label
  plot.margin = margin(5, 5, 15, 5)                        # Add space around plot (esp. bottom)
)
 
  
  #export the graph
ggsave(
  filename = "outputs/rlie_plot.jpeg", # File name
  plot = rlie_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 9, units = "cm"   # Dimensions
)

```

RLIe using SA methods

```{r}
## RLIE plot 2018-2014 using SA methods  ################################

RLIEsa <- rle24sa_sum %>%
  select(hgm, RLIE) %>% 
  rename(RLIE24 = RLIE) %>%
   left_join(rle18sa_sum, by ="hgm") %>%
   rename(RLIE18 = RLIE) %>%
   rename(Zone = hgm) %>%
  select(Zone,RLIE18, RLIE24) %>%
  pivot_longer(cols = c(2,3), names_to = "Year", values_to = "RLIE") %>%
    mutate(Year = case_when(
    Year == "RLIE18" ~ "2018",
    Year == "RLIE24" ~ "2024",
    TRUE ~ Year
  ))

rliesa_plot <- ggplot(RLIEsa, aes(x = Year, y = RLIE, group = Zone)) +
  geom_line(aes(linetype = Zone, color = Zone), linewidth = 1.2) +
  geom_point(aes(color = Zone), size = 2) +
  theme_minimal() +
  labs(x = "Year", y = "RLIE") +
  scale_x_discrete(limits = c("2018", "2024"), expand = c(0, 0)) +
  scale_color_manual(values = c(
    "Total" = "black",
    "Depression" = "blue",
    "Floodplain" = "darkgreen",
    "Seep" = "brown",
    "Unchannelled valley-bottom" = "orange"
  )) +
  coord_cartesian(ylim = c(0.3, 0.9)) +
    guides(color = guide_legend(reverse = TRUE),
         linetype = guide_legend(reverse = TRUE)) +
    theme(
  legend.title = element_blank(),
  legend.position = "bottom",
  legend.text = element_text(size = 6),
  axis.title.x = element_text(margin = margin(t = 8)),    # Add space above x-axis label
  plot.margin = margin(5, 5, 15, 5)                        # Add space around plot (esp. bottom)
)
 
  
  #export the graph
ggsave(
  filename = "outputs/rliesa_plot.jpeg", # File name
  plot = rliesa_plot,                   # Plot object
  device = "jpeg",                        # File format
  width = 9, height = 9, units = "cm"   # Dimensions
)

```
